# encoding: utf-8
'''
The MIT License (MIT)
Copyright © 2023 Chris Carl <chrisbcarl@outlook.com>
Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the “Software”), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.

Author:     Chris Carl <chrisbcarl@outlook.com>
Date:       2024-09-26
Modified:   2024-09-26

Modified:
    2025-08-03 - chrisbcarl - moved functions around, perfected the read_bytearray_from_disk
    2025-08-02 - chrisbcarl - added perf+fill+read and smartmon
    2025-08-01 - chrisbcarl - changed to chriscarl.tools.analyze-disk-performance
                              created the 'health' module which is designed to rip through all disks
                              added crystaldiskinfo utilization, we'll see how it goes after testing.
    2024-09-28 - chrisbcarl - added "write" mode, much easier.
    2024-09-26 - chrisbcarl - complete rewrite with different modes this time
    2023-07-05 - chrisbcarl - init commit, behaves like sequential write/readback, thats it.

TODO:
    - move toward list operations rather than explicitly perf + write, like you can mix perf write loop etc, implying
        the bytearray generated by perf is used by write and loop
    - deal with the situation where create_bytearray would result in a bytearray the size larger than the universe.
        better would be to make some object that when you ask for an index or the next byte,
        it GENRATES it, is writable, etc...
    - dynamic crystaldiskinfo txt

Examples:
    1. Find performance sweetspot and fill the disk at partition D:/
        python main.py perf+fill --data-filepath D:/temp
    2. Evaluate overall health on all newly inserted disks
        python main.py health --ignore-partitions C --log-level DEBUG
'''
# stdlib
from __future__ import print_function, division
import os
import sys
import re
import csv
import time
import copy
import json
import shutil
import string
import random
import logging
import argparse
import datetime
import threading
import subprocess
import multiprocessing
from typing import Tuple, Dict

# 3rd party
import pandas as pd
import psutil

# local
from constants import (
    DATA_FILEPATH,
    PERF_FILEPATH,
    VALUE,
    DURATION,
    ITERATIONS,
    CRYSTALDISKINFO_EXE,
    CRYSTALDISKINFO_TXT,
)
from lib import (
    get_keys_from_dicts,
    create_bytearray,
    create_bytearray_killobytes,
    disk_usage_monitor,
    write_byte_array_continuously,
    write_byte_array_contiguously,
    create_byte_array_high_throughput,
    write_bytearray_to_disk,
    read_bytearray_from_disk,
    generate_and_write_bytearray,
    crystaldiskinfo,
)

SCRIPT_DIRPATH = os.path.abspath(os.path.dirname(__file__))
OPERATIONS = ['perf', 'fill', 'perf+fill', 'loop', 'write', 'perf+write', 'health', 'perf+fill+read', 'smartmon']
LOG_LEVELS = list(logging._nameToLevel)  # pylint: disable=(protected-access)
LOG_LEVEL = 'INFO'

# arg defaults
CPU_COUNT = multiprocessing.cpu_count()
SIZE = 1
PERIOD = 15
LOOPS = -1


class NiceFormatter(
    argparse.ArgumentDefaultsHelpFormatter, argparse.RawTextHelpFormatter, argparse.RawDescriptionHelpFormatter
):
    pass


def validate_kwargs(
    operation=OPERATIONS[0],
    log_level='INFO',
    value=VALUE,
    size=SIZE,
    duration=DURATION,
    iterations=ITERATIONS,
    no_optimizations=False,
    data_filepath=DATA_FILEPATH,
    perf_filepath=PERF_FILEPATH,
    ignore_partitions=None,
    period=PERIOD,
    loops=LOOPS,
):
    if operation not in OPERATIONS:
        raise KeyError(f'operation {operation!r} does not exist, use one of {OPERATIONS}!')
    if log_level not in LOG_LEVELS:
        raise KeyError(f'log_level {log_level!r} does not exist!')
    if value != -1:
        if value < 0 and 255 < value:
            raise ValueError('value must be a value between [0,255] or -1')
    if size < 1:
        raise ValueError('duration must be a postive int, are you nuts?')
    if duration < 0 and duration != -1:
        raise ValueError('duration must be a postive num (or -1), are you nuts?')
    if iterations < 0:
        raise ValueError('iterations must be a postive int, are you nuts?')
    if not isinstance(no_optimizations, bool):
        raise TypeError(f'no_optimizations must be of type bool, provided {type(no_optimizations)}')
    for filepath in [data_filepath, perf_filepath]:
        if not os.path.isdir(os.path.dirname(filepath)):
            os.makedirs(os.path.dirname(filepath), exist_ok=True)
    if isinstance(ignore_partitions, list):
        for ignore_partition in ignore_partitions:
            if ignore_partition not in string.ascii_uppercase:
                raise ValueError(f'ignore_partition {ignore_partition!r} not in expected possibilities!')
    if period < 0:
        raise ValueError('period must be positive!')
    if loops < 0 and loops != -1:
        raise ValueError('loops must be positive!')


def perf_fill_read(data_filepath=DATA_FILEPATH, perf_filepath=PERF_FILEPATH, value=VALUE, loops=-1, duration=-1):
    sweetspot_byte_array = create_byte_array_high_throughput(
        data_filepath=data_filepath, perf_filepath=perf_filepath, value=value
    )
    if loops > -1:
        for iteration in range(1, loops + 1):
            try:
                logging.info('fill+read iteration %d / %d', iteration + 1, loops)
                write_byte_array_contiguously(sweetspot_byte_array, data_filepath=data_filepath)
                read_bytearray_from_disk(sweetspot_byte_array, data_filepath=data_filepath)
            except KeyboardInterrupt:
                logging.warning('ctrl + c detected!')
                break
    elif duration > -1:
        start = time.time()
        elapsed = time.time() - start
        iteration = 1
        while elapsed < duration:
            try:
                logging.info('fill+read iteration %d until %s > %s', iteration, elapsed, duration)
                write_byte_array_contiguously(sweetspot_byte_array, data_filepath=data_filepath)
                if elapsed > duration:
                    logging.info('time exceeded after write')
                    break
                read_bytearray_from_disk(sweetspot_byte_array, data_filepath=data_filepath)
                if elapsed > duration:
                    logging.info('time exceeded after read')
                    break

                iteration += 1
                elapsed = time.time() - start
            except KeyboardInterrupt:
                logging.warning('ctrl + c detected!')
                break
    else:
        iteration = 1
        while True:
            try:
                logging.info('fill+read iteration %d infinitely', iteration)
                write_byte_array_contiguously(sweetspot_byte_array, data_filepath=data_filepath)
                read_bytearray_from_disk(sweetspot_byte_array, data_filepath=data_filepath)

                iteration += 1
            except KeyboardInterrupt:
                logging.warning('ctrl + c detected!')
                break


def main():
    global CRYSTALDISKINFO_EXE
    parser = argparse.ArgumentParser(prog='fill-the-drive', description=__doc__, formatter_class=NiceFormatter)
    operations = parser.add_subparsers(help='different operations we can do')

    op0 = operations.add_parser(
        'perf',
        help='analyze the performance of the drive which determines a file size that is fastest to write',
        description=create_byte_array_high_throughput.__doc__,
        formatter_class=NiceFormatter,
    )
    op0.set_defaults(operation='perf')

    op1 = operations.add_parser(
        'fill',
        help='fill up the disk',
        description=write_byte_array_contiguously.__doc__,
        formatter_class=NiceFormatter,
    )
    op1.set_defaults(operation='fill')
    group = op1.add_argument_group('operation specific')
    group.add_argument('--size', type=int, default=SIZE, help='size in killobytes, so --size * 1024B')

    op2 = operations.add_parser(
        'perf+fill',
        help='do perf+fill',
        description=write_byte_array_contiguously.__doc__,
        formatter_class=NiceFormatter,
    )
    op2.set_defaults(operation='perf+fill')
    group = op2.add_argument_group('operation specific')

    op3 = operations.add_parser(
        'loop',
        help='repeatedly write to the disk for some size and duration',
        description=write_byte_array_continuously.__doc__,
        formatter_class=NiceFormatter,
    )
    op3.set_defaults(operation='loop')
    group = op3.add_argument_group('operation specific')
    group.add_argument('--size', type=int, default=SIZE, help='size in killobytes, so --size * 1024B')
    group.add_argument(
        '--duration',
        type=int,
        default=DURATION,
        help='either run till --duration in seconds or --iteration is exceeded'
    )
    group.add_argument(
        '--iterations',
        type=int,
        default=ITERATIONS,
        help='either run till --duration in seconds or --iteration is exceeded'
    )

    op4 = operations.add_parser(
        'write',
        help='make a new file with a particular size',
        description=generate_and_write_bytearray.__doc__,
        formatter_class=NiceFormatter,
    )
    op4.set_defaults(operation='write')
    group = op4.add_argument_group('operation specific')
    group.add_argument('--size', type=int, default=SIZE, help='size in bytes')
    group.add_argument(
        '--no-optimizations',
        '--no_optimizations',
        action='store_true',
        help='generate the FULL byte_array in memory, no matter how unreasonable.'
    )

    op5 = operations.add_parser(
        'perf+write',
        help='make a new file with a particular size',
        description=f'{create_byte_array_high_throughput.__doc__}\n{write_bytearray_to_disk.__doc__}',
        formatter_class=NiceFormatter,
    )
    op5.set_defaults(operation='perf+write')
    group = op5.add_argument_group('operation specific')
    group.add_argument('--size', type=int, default=SIZE, help='size in bytes')
    group.add_argument(
        '--no-optimizations',
        '--no_optimizations',
        action='store_true',
        help='generate the FULL byte_array in memory, no matter how unreasonable.'
    )

    op6 = operations.add_parser(
        'health',
        help='evaluate all disks for their health and track the movements',
        description=generate_and_write_bytearray.__doc__,
        formatter_class=NiceFormatter,
    )
    op6.set_defaults(operation='health')
    group = op6.add_argument_group('operation specific')
    group.add_argument(
        '--ignore-partitions', type=str, nargs='*', default=['C', 'D', 'E'], help='if known partitions, ignore these'
    )
    group.add_argument('--period', type=float, default=PERIOD, help='telemetry poll period')

    op7 = operations.add_parser(
        'perf+fill+read',
        help='fill disk, readback',
        description=perf_fill_read.__doc__,
        formatter_class=NiceFormatter,
    )
    op7.set_defaults(operation='perf+fill+read')
    group = op7.add_argument_group('operation specific')
    group.add_argument('--loops', type=int, default=-1, help='default infinitely')
    group.add_argument('--duration', type=int, default=-1, help='default infinitely, measured in seconds')

    op8 = operations.add_parser(
        'smartmon',
        help='repeatedly run crystaldiskinfo',
        description='TODO: plz',  # TODO: plz
        formatter_class=NiceFormatter,
    )
    op8.set_defaults(operation='smartmon')
    group = op8.add_argument_group('operation specific')
    group.add_argument('--period', type=float, default=PERIOD, help='telemetry poll period')

    for op in [op0, op1, op2, op3, op4, op5, op6, op7, op8]:
        group = op.add_argument_group('general')
        group.add_argument(
            '--data-filepath', type=str, default=DATA_FILEPATH, help='where to dump the file that fills the disk.'
        )
        group.add_argument(
            '--perf-filepath', type=str, default=PERF_FILEPATH, help='where to dump the csv with performance data.'
        )
        group.add_argument(
            '--value', type=int, default=VALUE, help='fill bytearray with a constant byte value, default means random.'
        )
        group.add_argument('--log-level', type=str, default=LOG_LEVEL, choices=LOG_LEVELS, help='log level')

    args = parser.parse_args()
    validate_kwargs(**vars(args))

    logging.basicConfig(
        format='%(asctime)s - %(levelname)10s - %(funcName)48s - %(message)s', level=args.log_level, stream=sys.stdout
    )
    logging.info('starting %r', args.operation)

    if args.operation == 'perf':
        create_byte_array_high_throughput(
            value=args.value, data_filepath=args.data_filepath, perf_filepath=args.perf_filepath
        )

    elif args.operation == 'perf+fill':
        sweetspot_byte_array = create_byte_array_high_throughput(
            data_filepath=args.data_filepath, perf_filepath=args.perf_filepath, value=args.value
        )
        write_byte_array_contiguously(sweetspot_byte_array, data_filepath=args.data_filepath)

    elif args.operation in ['fill', 'loop']:
        byte_array = create_bytearray_killobytes(args.size, value=args.value)
        if args.operation == 'fill':
            write_byte_array_contiguously(byte_array, data_filepath=args.data_filepath)
        elif args.operation == 'loop':
            write_byte_array_continuously(
                byte_array, data_filepath=args.data_filepath, duration=args.duration, iterations=args.iterations
            )

    elif args.operation == 'write':
        generate_and_write_bytearray(
            args.size,
            value=args.value,
            no_optimizations=args.no_optimizations,
            data_filepath=args.data_filepath,
            randomness=False
        )

    elif args.operation == 'perf+write':
        sweetspot_byte_array = create_byte_array_high_throughput(
            data_filepath=args.data_filepath, perf_filepath=args.perf_filepath, value=args.value
        )
        write_bytearray_to_disk(sweetspot_byte_array, size=args.size, data_filepath=args.data_filepath)

    elif args.operation == 'perf+fill+read':
        perf_fill_read(
            data_filepath=args.data_filepath,
            perf_filepath=args.perf_filepath,
            value=args.value,
            loops=args.loops,
            duration=args.duration
        )

    elif args.operation == 'smartmon':
        logging.debug('reading crystaldiskinfo')
        crystal_data = crystaldiskinfo()
        crystaldisk_keys = get_keys_from_dicts(*list(crystal_data.values()))
        if not os.path.isfile(args.perf_filepath):
            with open(args.perf_filepath, 'w', encoding='utf-8', newline='') as w:
                writer = csv.DictWriter(w, fieldnames=crystaldisk_keys)
                writer.writeheader()
                for value in crystal_data.values():
                    writer.writerow(value)
        else:
            # combine old and new keys
            old_df = pd.from_csv(args.perf_filepath)
            new_df = pd.DataFrame(crystal_data.values())
            df = pd.concat([old_df, new_df])
            df.to_csv(index=False)
            crystaldisk_keys = df.columns.tolist()

        try:
            started = datetime.datetime.now()
            while True:
                now = datetime.datetime.now()
                logging.info('elapsed: %s', now - started)
                crystal_data = crystaldiskinfo()
                with open(args.perf_filepath, 'a', encoding='utf-8', newline='') as a:
                    writer = csv.DictWriter(a, fieldnames=crystaldisk_keys)
                    for value in crystal_data.values():
                        writer.writerow(value)
                time.sleep(args.period)
        except KeyboardInterrupt:
            logging.warning('ctrl + c detected! killing processes, removing resources...')

    elif args.operation == 'health':
        try:
            output = subprocess.check_output(
                ['where.exe' if sys.platform == 'win32' else 'which', CRYSTALDISKINFO_EXE], universal_newlines=True
            )
            for line in output.splitlines():
                strip = line.strip()
                if os.path.isfile(strip):
                    CRYSTALDISKINFO_EXE = strip
                    break
            if not os.path.isfile(strip):
                raise OSError(f'Could not find "{CRYSTALDISKINFO_EXE}"!')
        except subprocess.CalledProcessError:
            logging.warning('WARNING: CrystalDiskInfo not installed or not on path!')
            return 1

        if sys.platform != 'win32':
            raise NotImplementedError(sys.platform)

        logging.debug('checking admin access')
        admin_ps1 = os.path.join(SCRIPT_DIRPATH, r"scripts\win32\admin.ps1")
        subprocess.check_call(['powershell', admin_ps1])
        logging.info('admin detected!')

        # get current partitions
        logging.debug('sanitizing unwanted partitions')
        read_partitions_ps1 = os.path.join(SCRIPT_DIRPATH, r"scripts\win32\read-partitions.ps1")
        cmd = ['powershell', read_partitions_ps1]
        logging.debug(subprocess.list2cmdline(cmd))
        output = subprocess.check_output(cmd, universal_newlines=True)
        read_partitions = json.loads(output)
        logging.debug('partitions: %s', json.dumps(read_partitions, indent=2))
        logging.info('read partitions!')

        logging.debug('filter out all partitions that dont belong')
        drive_letters_to_remove = [key for key in read_partitions if key not in args.ignore_partitions]
        logging.debug('removing drive letters: %s', drive_letters_to_remove)
        disk_numbers = [val['DiskNumber'] for key, val in read_partitions.items() if key not in args.ignore_partitions]
        logging.debug('will operate on drive numbers: %s', disk_numbers)
        logging.info('found disks and old partitions!')

        if drive_letters_to_remove:
            logging.debug('remove partitions so they return to raw')
            delete_partitions_ps1 = os.path.join(SCRIPT_DIRPATH, r"scripts\win32\delete-partitions.ps1")
            cmd = ['powershell', delete_partitions_ps1, '-DriveLetters', ','.join(drive_letters_to_remove)]
            logging.debug(subprocess.list2cmdline(cmd))
            output = subprocess.check_output(cmd, universal_newlines=True)
            logging.debug(output)
            logging.info('removed unwanted partitions!')

        logging.debug('make new partitions')
        create_partitions_ps1 = os.path.join(SCRIPT_DIRPATH, r"scripts\win32\create-partitions.ps1")
        cmd = ['powershell', create_partitions_ps1, '-DriveLetters', ','.join(drive_letters_to_remove)]
        logging.debug(subprocess.list2cmdline(cmd))
        output = subprocess.check_output(cmd, universal_newlines=True)
        create_partitions_sentinel = "Begin Output Parsing Here:"
        logging.debug(output)
        output = output[output.find(create_partitions_sentinel) + len(create_partitions_sentinel) + 1:].strip()
        logging.debug(output)
        drive_number_to_letter_dict = json.loads(output)
        logging.debug('will operate on drive numbers and letters: %s', drive_number_to_letter_dict)
        logging.info('created new partitions!')

        logging.debug('reading disks')
        read_disks_ps1 = os.path.join(SCRIPT_DIRPATH, r"scripts\win32\read-disks.ps1")
        cmd = ['powershell', read_disks_ps1]
        logging.debug(subprocess.list2cmdline(cmd))
        output = subprocess.check_output(cmd, universal_newlines=True)
        read_disks = json.loads(output)
        logging.debug('disks: %s', json.dumps(read_disks, indent=2))
        logging.debug('read disk info!')

        logging.debug('reading crystaldiskinfo')
        crystal_data = crystaldiskinfo()
        crystaldisk_keys = get_keys_from_dicts(*list(crystal_data.values()))
        if not os.path.isfile(args.perf_filepath):
            with open(args.perf_filepath, 'w', encoding='utf-8', newline='') as w:
                writer = csv.DictWriter(w, fieldnames=crystaldisk_keys)
                writer.writeheader()
        with open(args.perf_filepath, 'a', encoding='utf-8', newline='') as a:
            writer = csv.DictWriter(a, fieldnames=crystaldisk_keys)
            for value in crystal_data.values():
                writer.writerow(value)
        logging.info('read crystaldiskinfo!')

        logging.debug('starting perf+fill')
        started = datetime.datetime.now()
        popens = []
        for drive_number, drive_letter in drive_number_to_letter_dict.items():
            data_filepath = f'{drive_letter}:/{drive_number}-perf+fill.dat'
            perf_filepath = f'{drive_letter}:/{drive_number}-perf+fill.csv'
            stdout = f'{drive_letter}:/{drive_number}-perf+fill.stdout'
            stderr = f'{drive_letter}:/{drive_number}-perf+fill.stderr'
            cmd = [
                sys.executable,
                os.path.abspath(__file__),
                'perf+fill',
                '--data-filepath',
                data_filepath,
                '--perf-filepath',
                perf_filepath,
                '--value',
                str(args.value),
                '--log-level',
                args.log_level,
            ]
            logging.debug('drive %s (%s): %s', drive_number, drive_letter, subprocess.list2cmdline(cmd))
            with open(stdout, 'wb') as sout, open(stderr, 'wb') as serr:
                popen = subprocess.Popen(cmd, stdout=sout, stderr=serr)
                popens.append(popen)

        logging.info('launching multi perf+fill on %d partitions/drives...', len(drive_number_to_letter_dict))
        try:
            while True:
                now = datetime.datetime.now()
                logging.info('elapsed: %s', now - started)
                crystal_data = crystaldiskinfo()
                with open(args.perf_filepath, 'a', encoding='utf-8', newline='') as a:
                    writer = csv.DictWriter(a, fieldnames=crystaldisk_keys)
                    for value in crystal_data.values():
                        writer.writerow(value)
                if all([popen.poll() is not None for popen in popens]):
                    logging.info('All perf+ fill finished!')
                    break
                time.sleep(args.period)
        except KeyboardInterrupt:
            logging.warning('ctrl + c detected! killing processes, removing resources...')

        logging.info('closing resources...')
        for popen in popens:
            if popen.poll() is None:
                popen.kill()
                subprocess.Popen(['taskkill', '/pid', str(popen.pid), '/f', '/t'], shell=True).wait()
        for drive_number, drive_letter in drive_number_to_letter_dict.items():
            data_filepath = os.path.abspath(f'{drive_letter}:/{drive_number}-perf+fill.dat')
            perf_filepath = os.path.abspath(f'{drive_letter}:/{drive_number}-perf+fill.csv')
            stdout = os.path.abspath(f'{drive_letter}:/{drive_number}-perf+fill.stdout')
            stderr = os.path.abspath(f'{drive_letter}:/{drive_number}-perf+fill.stderr')

            dirpath = os.path.dirname(args.perf_filepath)
            for filepath in [data_filepath, perf_filepath, stdout, stderr]:
                destination = os.path.join(dirpath, os.path.basename(filepath))
                logging.info('output: "%s"', destination)
                if os.path.isfile(destination):
                    try:
                        os.remove(destination)
                    except Exception:
                        logging.error('unable to delete ""%s', destination)

            try:
                os.remove(data_filepath)
            except Exception:
                logging.error('unable to delete ""%s', data_filepath)
            for src in [perf_filepath, stdout, stderr]:
                if os.path.isfile(src):
                    shutil.move(src, dirpath)

        logging.debug('removing partitions...')
        delete_partitions_ps1 = os.path.join(SCRIPT_DIRPATH, r"scripts\win32\delete-partitions.ps1")
        cmd = [
            'powershell', delete_partitions_ps1, '-Offline', '-DriveLetters',
            ','.join(drive_number_to_letter_dict.values())
        ]
        logging.debug(subprocess.list2cmdline(cmd))
        output = subprocess.check_output(cmd, universal_newlines=True)
        logging.debug(output)
        logging.info('removed all used partitions!')

    logging.info('perf-filepath: "%s"', args.perf_filepath)
    logging.info('done %r', args.operation)


if __name__ == '__main__':
    main()
